import React, { useState, useEffect, useRef } from "react";
import { assets, menuLinks } from "../assets/assets";
import { useAppContext } from "../context/AppContext";
import { motion } from "framer-motion";
import { Link, useLocation, useNavigate, createSearchParams } from "react-router-dom";
import toast from "react-hot-toast";
import {
Â  MapContainer,
Â  TileLayer,
Â  Marker,
Â  Circle,
Â  useMapEvents,
} from "react-leaflet";
import "leaflet/dist/leaflet.css";
import L from "leaflet"; // Import leaflet to change the default icon
import "rc-slider/assets/index.css"; // Import slider styles
import Slider from "rc-slider";

// Fix for default Leaflet icon not showing
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
Â  iconRetinaUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon-2x.png',
Â  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
Â  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',
});

const Hero = () => {
Â  const navigate = useNavigate();
Â  const location = useLocation();
Â  const { setShowLogin, user, logout, isOwner, axios, setIsOwner, filters, setFilters, handleSearch, handleRemoveAllFilters, handleRemoveFilter } =
Â  Â  useAppContext();

Â  const [open, setOpen] = useState(false);
Â  const dropdownRef = useRef(null);
Â  const [showModal, setShowModal] = useState(false);
Â  const [mapCenter, setMapCenter] = useState([0.3476, 32.5825]); // Kampala default
Â  const [markerPosition, setMarkerPosition] = useState(null);
Â  const [locationSuggestions, setLocationSuggestions] = useState([]);

Â  // Available amenities list
Â  const availableAmenities = ["WiFi", "Pool", "Gym", "Parking", "Air Conditioning", "Pet Friendly"];

Â  // --- Sync filters from URL on page load or URL change ---
Â  useEffect(() => {
Â  Â  const searchParams = new URLSearchParams(location.search);
Â  Â  const newFilters = {
Â  Â  Â  location: searchParams.get("location") || "",
Â  Â  Â  lat: searchParams.get("lat") ? parseFloat(searchParams.get("lat")) : null,
Â  Â  Â  lng: searchParams.get("lng") ? parseFloat(searchParams.get("lng")) : null,
Â  Â  Â  radius: searchParams.get("radius") ? parseInt(searchParams.get("radius")) : 2000,
Â  Â  Â  minPrice: searchParams.get("minPrice") ? parseInt(searchParams.get("minPrice")) : null,
Â  Â  Â  maxPrice: searchParams.get("maxPrice") ? parseInt(searchParams.get("maxPrice")) : null,
Â  Â  Â  propertyType: searchParams.get("propertyType") || "",
Â  Â  Â  bedrooms: searchParams.get("bedrooms") ? parseInt(searchParams.get("bedrooms")) : null,
Â  Â  Â  bathrooms: searchParams.get("bathrooms") ? parseInt(searchParams.get("bathrooms")) : null,
Â  Â  Â  amenities: searchParams.get("amenities") ? searchParams.get("amenities").split(",") : [],
Â  Â  };
Â  Â  setFilters(newFilters);
Â  Â  if (newFilters.lat && newFilters.lng) {
Â  Â  Â  setMapCenter([newFilters.lat, newFilters.lng]);
Â  Â  Â  setMarkerPosition([newFilters.lat, newFilters.lng]);
Â  Â  }
Â  }, [location.search, setFilters]);

Â  // --- Geocoding for location autocomplete ---
Â  const geocode = async (query) => {
Â  Â  if (query.length < 3) return [];
Â  Â  try {
Â  Â  Â  const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&addressdetails=1&limit=5`;
Â  Â  Â  const response = await fetch(url);
Â  Â  Â  const data = await response.json();
Â  Â  Â  return data;
Â  Â  } catch (error) {
Â  Â  Â  console.error("Geocoding failed:", error);
Â  Â  Â  return [];
Â  Â  }
Â  };

Â  useEffect(() => {
Â  Â  if (filters.location) {
Â  Â  Â  const handler = setTimeout(() => {
Â  Â  Â  Â  geocode(filters.location).then(results => setLocationSuggestions(results));
Â  Â  Â  }, 500); // Debounce
Â  Â  Â  return () => clearTimeout(handler);
Â  Â  } else {
Â  Â  Â  setLocationSuggestions([]);
Â  Â  }
Â  }, [filters.location]);

Â  // --- Update a single filter ---
Â  const handleFilterChange = (key, value) => {
Â  Â  setFilters(prev => ({ ...prev, [key]: value }));
Â  };

Â  // --- Current Location ---
Â  const handleUseCurrentLocation = () => {
Â  Â  if (!navigator.geolocation) {
Â  Â  Â  toast.error("Geolocation is not supported by your browser.");
Â  Â  Â  return;
Â  Â  }
Â  Â  navigator.geolocation.getCurrentPosition(
Â  Â  Â  (pos) => {
Â  Â  Â  Â  const { latitude, longitude } = pos.coords;
Â  Â  Â  Â  setMapCenter([latitude, longitude]);
Â  Â  Â  Â  setMarkerPosition([latitude, longitude]);
Â  Â  Â  Â  setFilters(prev => ({
Â  Â  Â  Â  Â  ...prev,
Â  Â  Â  Â  Â  lat: latitude,
Â  Â  Â  Â  Â  lng: longitude,
Â  Â  Â  Â  }));
Â  Â  Â  Â  toast.success("Location found!");
Â  Â  Â  },
Â  Â  Â  (err) => {
Â  Â  Â  Â  let message = "Failed to get location. Please enable location services in your browser settings.";
Â  Â  Â  Â  if (err.code === err.PERMISSION_DENIED) {
Â  Â  Â  Â  Â  message = "Location permission denied. Please enable it to use this feature.";
Â  Â  Â  Â  }
Â  Â  Â  Â  toast.error(message);
Â  Â  Â  },
Â  Â  Â  { enableHighAccuracy: true }
Â  Â  );
Â  };

Â  // --- Map click to choose location ---
Â  function LocationSelector() {
Â  Â  useMapEvents({
Â  Â  Â  click(e) {
Â  Â  Â  Â  setMarkerPosition([e.latlng.lat, e.latlng.lng]);
Â  Â  Â  Â  setFilters(prev => ({
Â  Â  Â  Â  Â  ...prev,
Â  Â  Â  Â  Â  lat: e.latlng.lat,
Â  Â  Â  Â  Â  lng: e.latlng.lng,
Â  Â  Â  Â  }));
Â  Â  Â  },
Â  Â  });
Â  Â  return null;
Â  }

Â  // --- Close dropdown on outside click ---
Â  useEffect(() => {
Â  Â  const handleClickOutside = (e) => {
Â  Â  Â  if (dropdownRef.current && !dropdownRef.current.contains(e.target)) {
Â  Â  Â  Â  setOpen(false);
Â  Â  Â  }
Â  Â  };
Â  Â  document.addEventListener("mousedown", handleClickOutside);
Â  Â  return () => document.removeEventListener("mousedown", handleClickOutside);
Â  }, []);

Â  // --- Get active filters for display ---
Â  const activeFilters = Object.entries(filters).filter(([key, value]) => {
Â  Â  if (key === "amenities") {
Â  Â  Â  return value.length > 0;
Â  Â  }
Â  Â  return value !== "" && value !== null && key !== "lat" && key !== "lng";
Â  });
Â  
Â  // Also check for lat/lng to show the map filter
Â  if (filters.lat !== null && filters.lng !== null) {
Â  Â  activeFilters.push(["mapLocation", "Map Location"]);
Â  }

Â  const getFilterLabel = (key, value) => {
Â  Â  switch (key) {
Â  Â  Â  case "location":
Â  Â  Â  Â  return `Location: ${value}`;
Â  Â  Â  case "minPrice":
Â  Â  Â  Â  return `Min Price: $${value}`;
Â  Â  Â  case "maxPrice":
Â  Â  Â  Â  return `Max Price: $${value}`;
Â  Â  Â  case "propertyType":
Â  Â  Â  Â  return `Type: ${value}`;
Â  Â  Â  case "bedrooms":
Â  Â  Â  Â  return `${value}+ Beds`;
Â  Â  Â  case "bathrooms":
Â  Â  Â  Â  return `${value}+ Baths`;
Â  Â  Â  case "radius":
Â  Â  Â  Â  return `Radius: ${Math.round(value / 1000)} km`;
Â  Â  Â  case "amenities":
Â  Â  Â  Â  return `Amenities: ${value.join(", ")}`;
Â  Â  Â  case "mapLocation":
Â  Â  Â  Â  return "Map Location Filter";
Â  Â  Â  default:
Â  Â  Â  Â  return `${key}: ${value}`;
Â  Â  }
Â  };

Â  return (
Â  Â  <div
Â  Â  Â  className="flex flex-col bg-white sticky top-0 left-0 right-0 z-50 border-b border-borderColor px-4 md:px-12"
Â  Â  Â  style={{
Â  Â  Â  Â  background: "linear-gradient(180deg, #ffffff 39.9%, #f8f8f8 100%)",
Â  Â  Â  }}
Â  Â  >
Â  Â  Â  {/* --- Top Navigation --- */}
Â  Â  Â  <div className="flex w-full items-center justify-between">
Â  Â  Â  Â  <Link to="/" className="z-50 py-4 md:py-6">
Â  Â  Â  Â  Â  <img src={assets.logo} alt="logo" className="h-8" />
Â  Â  Â  Â  </Link>

Â  Â  Â  Â  {/* Right Actions */}
Â  Â  Â  Â  <div className="flex items-center gap-4">
Â  Â  Â  Â  Â  {/* Add Listing / Dashboard */}
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={() => {
Â  Â  Â  Â  Â  Â  Â  if (isOwner) navigate("/owner");
Â  Â  Â  Â  Â  Â  Â  else if (!user) setShowLogin(true);
Â  Â  Â  Â  Â  Â  Â  else toast("Feature coming soon", { icon: 'ðŸš€' }); // Placeholder for change role
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  className="hidden sm:flex cursor-pointer rounded-3xl px-4 py-2 hover:bg-bgColor"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  {isOwner ? "Dashboard" : "Add Listing"}
Â  Â  Â  Â  Â  </button>

Â  Â  Â  Â  Â  {/* Dropdown Menu */}
Â  Â  Â  Â  Â  <div className="relative" ref={dropdownRef}>
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  className="flex items-center gap-3 rounded-full border border-borderColor px-3 py-2 hover:shadow-md"
Â  Â  Â  Â  Â  Â  Â  onClick={() => setOpen(!open)}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <img src={assets.menu_icon} alt="menu" className="h-4 w-4" />
Â  Â  Â  Â  Â  Â  Â  <img
Â  Â  Â  Â  Â  Â  Â  Â  src={user?.image || assets.user_profile}
Â  Â  Â  Â  Â  Â  Â  Â  alt="user"
Â  Â  Â  Â  Â  Â  Â  Â  className="h-8 w-8 rounded-full object-cover"
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  </button>

Â  Â  Â  Â  Â  Â  {open && (
Â  Â  Â  Â  Â  Â  Â  <div className="absolute right-0 mt-2 w-56 rounded-lg border border-light bg-white shadow-xl">
Â  Â  Â  Â  Â  Â  Â  Â  {menuLinks.map((link) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <Link
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={link.path}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  to={link.path}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="block px-4 py-2 hover:bg-gray-100"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setOpen(false)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {link.name}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </Link>
Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="block px-4 py-2 cursor-pointer hover:bg-gray-100"
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (!user) setShowLogin(true);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  else logout();
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setOpen(false);
Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  {user ? "Logout" : "Login / Signup"}
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>

Â  Â  Â  {/* --- Search Bar --- */}
Â  Â  Â  <motion.div
Â  Â  Â  Â  whileHover={{ scale: 1.02 }}
Â  Â  Â  Â  className="flex items-center justify-between max-w-4xl mx-auto w-full rounded-full bg-white shadow-md border px-6 py-3 cursor-pointer mt-4"
Â  Â  Â  Â  onClick={() => setShowModal(true)}
Â  Â  Â  >
Â  Â  Â  Â  <span className="text-gray-700">
Â  Â  Â  Â  Â  {filters.location || "Search location"}
Â  Â  Â  Â  </span>
Â  Â  Â  Â  <span className="text-gray-400">|</span>
Â  Â  Â  Â  <span>{filters.maxPrice ? `Up to $${filters.maxPrice}` : "Any Price"}</span>
Â  Â  Â  Â  <span className="text-gray-400">|</span>
Â  Â  Â  Â  <span>
Â  Â  Â  Â  Â  {filters.propertyType || "Any Property Type"}
Â  Â  Â  Â  </span>
Â  Â  Â  Â  <span className="text-gray-400">|</span>
Â  Â  Â  Â  <span>
Â  Â  Â  Â  Â  {filters.bedrooms
Â  Â  Â  Â  Â  Â  ? `${filters.bedrooms}+ Beds`
Â  Â  Â  Â  Â  Â  : "Any Bedrooms"}
Â  Â  Â  Â  </span>
Â  Â  Â  Â  <motion.button
Â  Â  Â  Â  Â  whileHover={{ scale: 1.05 }}
Â  Â  Â  Â  Â  whileTap={{ scale: 0.95 }}
Â  Â  Â  Â  Â  className="ml-4 bg-primary text-white px-4 py-2 rounded-full"
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <img src={assets.search_icon} alt="search" className="h-4 w-4" />
Â  Â  Â  Â  </motion.button>
Â  Â  Â  </motion.div>

Â  Â  Â  {/* --- Applied Filters Display --- */}
Â  Â  Â  {activeFilters.length > 0 && (
Â  Â  Â  Â  <div className="flex flex-wrap items-center justify-center gap-2 mt-4">
Â  Â  Â  Â  Â  <span className="font-semibold text-sm">Active Filters:</span>
Â  Â  Â  Â  Â  {activeFilters.map(([key, value]) => (
Â  Â  Â  Â  Â  Â  <div key={key} className="flex items-center gap-1 bg-gray-200 text-gray-700 px-3 py-1 rounded-full text-sm">
Â  Â  Â  Â  Â  Â  Â  <span>{getFilterLabel(key, value)}</span>
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  onClick={(e) => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  e.stopPropagation();
Â  Â  Â  Â  Â  Â  Â  Â  Â  handleRemoveFilter(key);
Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  className="text-red-500 hover:text-red-700"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  &times;
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={handleRemoveAllFilters}
Â  Â  Â  Â  Â  Â  className="px-3 py-1 text-sm rounded-full bg-red-500 text-white hover:bg-red-600 transition"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Remove All
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </div>
Â  Â  Â  )}

Â  Â  Â  {/* --- Filter Modal --- */}
Â  Â  Â  {showModal && (
Â  Â  Â  Â  <motion.div
Â  Â  Â  Â  Â  initial={{ opacity: 0 }}
Â  Â  Â  Â  Â  animate={{ opacity: 1 }}
Â  Â  Â  Â  Â  className="fixed inset-0 bg-black/20 flex items-center justify-center p-4 z-50"
Â  Â  Â  Â  Â  onClick={() => setShowModal(false)}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <motion.div
Â  Â  Â  Â  Â  Â  initial={{ y: 100, opacity: 0 }}
Â  Â  Â  Â  Â  Â  animate={{ y: 0, opacity: 1 }}
Â  Â  Â  Â  Â  Â  transition={{ duration: 0.3 }}
Â  Â  Â  Â  Â  Â  onClick={(e) => e.stopPropagation()}
Â  Â  Â  Â  Â  Â  className="bg-white rounded-2xl p-6 w-full max-w-3xl border border-light shadow-xl max-h-[90vh] overflow-y-auto"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <h2 className="text-lg font-semibold mb-4">Filter Listings</h2>

Â  Â  Â  Â  Â  Â  {/* --- Location Input with Autocomplete --- */}
Â  Â  Â  Â  Â  Â  <label className="block mb-2">Location</label>
Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  value={filters.location}
Â  Â  Â  Â  Â  Â  Â  onChange={(e) => handleFilterChange("location", e.target.value)}
Â  Â  Â  Â  Â  Â  Â  placeholder="Type a city or area"
Â  Â  Â  Â  Â  Â  Â  className="w-full border rounded-lg p-2"
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  {locationSuggestions.length > 0 && (
Â  Â  Â  Â  Â  Â  Â  <ul className="border rounded-lg mt-2 max-h-40 overflow-y-auto">
Â  Â  Â  Â  Â  Â  Â  Â  {locationSuggestions.map((suggestion) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <li
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={suggestion.place_id}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="p-2 cursor-pointer hover:bg-gray-100"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setFilters(prev => ({ 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ...prev, 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  location: suggestion.display_name,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  lat: parseFloat(suggestion.lat),
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  lng: parseFloat(suggestion.lon)
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }));
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setMapCenter([parseFloat(suggestion.lat), parseFloat(suggestion.lon)]);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setMarkerPosition([parseFloat(suggestion.lat), parseFloat(suggestion.lon)]);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setLocationSuggestions([]);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {suggestion.display_name}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </li>
Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  </ul>
Â  Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  type="button"
Â  Â  Â  Â  Â  Â  Â  onClick={handleUseCurrentLocation}
Â  Â  Â  Â  Â  Â  Â  className="mt-2 px-4 py-2 rounded-lg bg-primary text-white hover:bg-primary/90"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Use Current Location
Â  Â  Â  Â  Â  Â  </button>

Â  Â  Â  Â  Â  Â  {/* --- Map Picker --- */}
Â  Â  Â  Â  Â  Â  <div className="mt-4 rounded-lg overflow-hidden border h-72">
Â  Â  Â  Â  Â  Â  Â  <MapContainer center={mapCenter} zoom={13} style={{ height: "100%" }}>
Â  Â  Â  Â  Â  Â  Â  Â  <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />
Â  Â  Â  Â  Â  Â  Â  Â  <LocationSelector />
Â  Â  Â  Â  Â  Â  Â  Â  {markerPosition && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Marker position={markerPosition} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Circle center={markerPosition} radius={filters.radius} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  </MapContainer>
Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-3 mt-2">
Â  Â  Â  Â  Â  Â  Â  Â  <label>Radius:</label>
Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="range"
Â  Â  Â  Â  Â  Â  Â  Â  Â  min="500"
Â  Â  Â  Â  Â  Â  Â  Â  Â  max="10000"
Â  Â  Â  Â  Â  Â  Â  Â  Â  step="500"
Â  Â  Â  Â  Â  Â  Â  Â  Â  value={filters.radius}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) =>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  handleFilterChange("radius", Number(e.target.value))
Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  <span>{Math.round(filters.radius / 1000)} km</span>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  {/* --- Other Filters --- */}
Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  <label className="block mb-1">Price Range</label>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="px-1">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <Slider
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  range
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  min={0}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  max={1000000}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  step={1000}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  value={[filters.minPrice || 0, filters.maxPrice || 1000000]}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(value) => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setFilters(prev => ({
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ...prev,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  minPrice: value[0],
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  maxPrice: value[1]
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }));
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-between text-sm text-gray-600 mt-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>${filters.minPrice || 0}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <span>${filters.maxPrice || 1000000}</span>
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  <label className="block mb-1">Property Type</label>
Â  Â  Â  Â  Â  Â  Â  Â  <select
Â  Â  Â  Â  Â  Â  Â  Â  Â  value={filters.propertyType}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) =>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  handleFilterChange("propertyType", e.target.value)
Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full border rounded-lg p-2"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="">Any</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="apartment">Apartment</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="house">House</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="land">Land</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="commercial">Commercial</option>
Â  Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  <label className="block mb-1">Min Bedrooms</label>
Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  Â  value={filters.bedrooms || ""}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) =>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  handleFilterChange("bedrooms", e.target.value ? parseInt(e.target.value) : null)
Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full border rounded-lg p-2"
Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Min bedrooms"
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  <label className="block mb-1">Min Bathrooms</label>
Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  type="number"
Â  Â  Â  Â  Â  Â  Â  Â  Â  value={filters.bathrooms || ""}
Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) =>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  handleFilterChange("bathrooms", e.target.value ? parseInt(e.target.value) : null)
Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full border rounded-lg p-2"
Â  Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Min bathrooms"
Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  {/* --- Amenities --- */}
Â  Â  Â  Â  Â  Â  <div className="mt-6">
Â  Â  Â  Â  Â  Â  Â  <h3 className="text-md font-semibold mb-2">Amenities & Features</h3>
Â  Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-2 md:grid-cols-3 gap-y-2 gap-x-4">
Â  Â  Â  Â  Â  Â  Â  Â  {availableAmenities.map((amenity) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div key={amenity} className="flex items-center gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  type="checkbox"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  id={amenity}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  checked={filters.amenities.includes(amenity)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onChange={() => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const newAmenities = filters.amenities.includes(amenity)
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? filters.amenities.filter((a) => a !== amenity)
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : [...filters.amenities, amenity];
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  handleFilterChange("amenities", newAmenities);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="accent-primary"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <label htmlFor={amenity} className="text-sm cursor-pointer">{amenity}</label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  {/* --- Footer --- */}
Â  Â  Â  Â  Â  Â  <div className="flex justify-between mt-6">
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  type="button"
Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setShowModal(false)}
Â  Â  Â  Â  Â  Â  Â  Â  className="px-4 py-2 rounded-lg bg-gray-200 hover:bg-gray-300"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Cancel
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  type="button"
Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  handleSearch();
Â  Â  Â  Â  Â  Â  Â  Â  Â  setShowModal(false);
Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  className="px-4 py-2 rounded-lg bg-primary text-white hover:bg-primary/90"
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Apply Filters
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </motion.div>
Â  Â  Â  Â  </motion.div>
Â  Â  Â  )}
Â  Â  </div>
Â  );
};

export default Hero;